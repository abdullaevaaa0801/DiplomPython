{"name": "test_search_actor", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=129.0.6668.90)\nStacktrace:\n0   chromedriver                        0x000000010dafcd18 chromedriver + 4996376\n1   chromedriver                        0x000000010daf45da chromedriver + 4961754\n2   chromedriver                        0x000000010d697d10 chromedriver + 388368\n3   chromedriver                        0x000000010d66f44f chromedriver + 222287\n4   chromedriver                        0x000000010d7109fd chromedriver + 883197\n5   chromedriver                        0x000000010d7263f9 chromedriver + 971769\n6   chromedriver                        0x000000010d708753 chromedriver + 849747\n7   chromedriver                        0x000000010d6d7635 chromedriver + 648757\n8   chromedriver                        0x000000010d6d7e5e chromedriver + 650846\n9   chromedriver                        0x000000010dac3000 chromedriver + 4759552\n10  chromedriver                        0x000000010dac7f18 chromedriver + 4779800\n11  chromedriver                        0x000000010dac85e5 chromedriver + 4781541\n12  chromedriver                        0x000000010daa5aa9 chromedriver + 4639401\n13  chromedriver                        0x000000010dac88d9 chromedriver + 4782297\n14  chromedriver                        0x000000010da97044 chromedriver + 4579396\n15  chromedriver                        0x000000010dae4a08 chromedriver + 4897288\n16  chromedriver                        0x000000010dae4c03 chromedriver + 4897795\n17  chromedriver                        0x000000010daf41de chromedriver + 4960734\n18  libsystem_pthread.dylib             0x00007fff209238fc _pthread_start + 224\n19  libsystem_pthread.dylib             0x00007fff2091f443 thread_start + 15", "trace": "chrome_browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b5155347ac9ba88c7091a9ac032207f4\")>\n\n    def test_search_actor(chrome_browser):\n        chrome_browser.get(\"https://www.kinopoisk.ru\")\n>       chrome_browser.find_element(By.NAME, \"kp_query\").send_keys(\"Брэд Питт\")\n\nTests/test_UI.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:748: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10eb64170>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...fff209238fc _pthread_start + 224\\\\n19  libsystem_pthread.dylib             0x00007fff2091f443 thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=129.0.6668.90)\nE       Stacktrace:\nE       0   chromedriver                        0x000000010dafcd18 chromedriver + 4996376\nE       1   chromedriver                        0x000000010daf45da chromedriver + 4961754\nE       2   chromedriver                        0x000000010d697d10 chromedriver + 388368\nE       3   chromedriver                        0x000000010d66f44f chromedriver + 222287\nE       4   chromedriver                        0x000000010d7109fd chromedriver + 883197\nE       5   chromedriver                        0x000000010d7263f9 chromedriver + 971769\nE       6   chromedriver                        0x000000010d708753 chromedriver + 849747\nE       7   chromedriver                        0x000000010d6d7635 chromedriver + 648757\nE       8   chromedriver                        0x000000010d6d7e5e chromedriver + 650846\nE       9   chromedriver                        0x000000010dac3000 chromedriver + 4759552\nE       10  chromedriver                        0x000000010dac7f18 chromedriver + 4779800\nE       11  chromedriver                        0x000000010dac85e5 chromedriver + 4781541\nE       12  chromedriver                        0x000000010daa5aa9 chromedriver + 4639401\nE       13  chromedriver                        0x000000010dac88d9 chromedriver + 4782297\nE       14  chromedriver                        0x000000010da97044 chromedriver + 4579396\nE       15  chromedriver                        0x000000010dae4a08 chromedriver + 4897288\nE       16  chromedriver                        0x000000010dae4c03 chromedriver + 4897795\nE       17  chromedriver                        0x000000010daf41de chromedriver + 4960734\nE       18  libsystem_pthread.dylib             0x00007fff209238fc _pthread_start + 224\nE       19  libsystem_pthread.dylib             0x00007fff2091f443 thread_start + 15\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchWindowException"}, "start": 1728133417456, "stop": 1728133456748, "uuid": "459bd3dc-6c90-4a45-b8f4-92fe00e1b633", "historyId": "34175a0def2df61708f5b486783abfb2", "testCaseId": "34175a0def2df61708f5b486783abfb2", "fullName": "tests.test_UI#test_search_actor", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_UI"}, {"name": "host", "value": "MacBook-Pro-Red-2.local"}, {"name": "thread", "value": "9263-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_UI"}]}